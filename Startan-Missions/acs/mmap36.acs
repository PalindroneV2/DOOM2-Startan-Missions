#include "zcommon.acs"

global int 6 : SecretLevel36;

int roundwave = 0;
int roundnumbers;
int wavesize;
int wavenumbers;
bool waveover = TRUE;
int playerisalive;
int playerisarmored;
int zombiepoints = 500;
bool doublepointsbool = FALSE;

str currentweapon;
str lastweapon;
str lastweapon2;
str newweapon;
str anothermiddleman;

script 1 enter
{
	// ClearInventory();
    Thing_ChangeTID(0,935);
    ClearActorInventory(935);
	GiveActorInventory(935, "DoomFist", 1);
	GiveActorInventory(935, "M1911A1",1);
	GiveActorInventory(935, "Clip",32);
    Delay(35);
    currentweapon = GetWeapon();
}

script "pickedshotgunup" (void)
{
    lastweapon = currentweapon;
    Delay(35);
    currentweapon = GetWeapon();
}

script "StartSurvival" (void)
{
    roundwave = 1;
    waveover = false;
}

script 666 ENTER
//ROUND COUNTER HANDLER
{
    SetFont("BIGFONT");
    HudMessageBold(s:"Round ", i:roundwave;  HUDMSG_PLAIN, 935, CR_WHITE, 0.5, 0.01, 0, 1);
    HudMessageBold(s:"Enemies ", i:wavesize;  HUDMSG_PLAIN, 936, CR_WHITE, 0.5, 0.06, 0, 1);
    HudMessageBold(s:"$: ", i:zombiepoints;  HUDMSG_PLAIN, 937, CR_WHITE, 0.01, 0.7, 0, 1);
    Delay(1);
    Restart;
}

// script "PukingGunNames" ENTER
// {
//     HudMessageBold(s:"CurrentWeapon: ", s:currentweapon;  HUDMSG_FADEOUT, 199, CR_WHITE, 0.9, 0.5, 1.0, 1);
//     HudMessageBold(s:"LastWeapon: ", s:lastweapon;  HUDMSG_FADEOUT, 200, CR_WHITE, 0.9, 0.525, 1.0, 1);
//     HudMessageBold(s:"LastWeapon2: ", s:lastweapon2;  HUDMSG_FADEOUT, 201, CR_WHITE, 0.9, 0.55, 1.0, 1);
//     HudMessageBold(s:"NewWeapon: ", s:newweapon;  HUDMSG_FADEOUT, 202, CR_WHITE, 0.9, 0.575, 1.0, 1);
//     HudMessageBold(s:"AnotherMiddleman: ", s:anothermiddleman;  HUDMSG_FADEOUT, 203, CR_WHITE, 0.9, 0.6, 1.0, 1);
//     Delay(1);
//     Restart;
// }

// str weakenemies[4] = {"DoomImp", "W3DMutant", "EnemyDog", "LostSoul"};
str weakenemies[2] = {"DoomImp", "EnemyDog"};
str mediumenemies[5] = {"Demon","Revenant", "HellKnight","Arachnotron","Cacodemon"};
str strongenemies[3] = {"Archvile","BaronofHell", "Fatso"};
str bossenemies[2] = {"Harbinger", "SpiderMastermind"};

str allenemies[12] = {
    "DoomImp", "EnemyDog", "Demon","Revenant", "HellKnight","Arachnotron",
    "Cacodemon", "Cacodemon","Fatso", "BaronofHell", "Harbinger", "SpiderMastermind",
};
int allenemiestids[12] = {
    115,115,116,116,116,116,
    116,117,117,117,118,118
};

script 777 enter
//This handles the rounds
{
    if(roundwave > 0){
        roundnumbers = 4 + (roundwave * 4);
    }
    // int spothandler = 1;
    int spothandler;
    int spotspawn;
    if(roundwave > 0 && waveover == false && wavesize < 1){
        for (spotspawn = 1; spotspawn <= roundnumbers; spotspawn++ )
        {
            spothandler = Random(1,24);
            if(roundwave <= 4){
                SpawnSpotFacing(allenemies[Random(0,1)], spothandler, allenemiestids[Random(0,1)]);
                // SpawnSpot("TeleportFog", spothandler);
            }else if(roundwave > 4 && roundwave < 10){
                SpawnSpotFacing(allenemies[Random(2,6)], spothandler, allenemiestids[Random(2,6)]);
                // SpawnSpot("TeleportFog", spothandler);
            }else if(roundwave > 9 && roundwave < 15){
                SpawnSpotFacing(allenemies[Random(2,9)], spothandler, allenemiestids[Random(2,9)]);
                // SpawnSpot("TeleportFog", spothandler);
            }else if(roundwave > 14 ){
                // SpawnSpot("TeleportFog", spothandler);
                if (ThingCount(T_NONE,118) >= 3)
                {
                    SpawnSpotFacing(allenemies[9], spothandler, allenemiestids[9]);
                }else{
                    SpawnSpotFacing(allenemies[Random(9,11)], spothandler, allenemiestids[Random(9,11)]);
                }
            }
            SpawnSpot("TeleportFog", spothandler);
            SetThingSpecial(115, ACS_NamedExecute, "PointsAddWeak");
            SetThingSpecial(116, ACS_NamedExecute, "PointsAddMedium");
            SetThingSpecial(117, ACS_NamedExecute, "PointsAddStrong");
            SetThingSpecial(118, ACS_NamedExecute, "PointsAddBoss");
            wavenumbers++;
            // spothandler++;
            // if(spothandler>24)
            // {
            //     spothandler = 1;
            // }
            Delay(7);
        }
    }
    wavesize = ThingCount(T_NONE, 115) + ThingCount(T_NONE, 116) + ThingCount(T_NONE, 117) + ThingCount(T_NONE, 118);
    if (wavenumbers == wavesize){
        waveover = true;
        // Log(s:"waveover:", b:waveover);t
    }
    wavenumbers = 0;
    if(wavesize == 0 && roundwave > 0 && waveover == true){
        SetFont("BIGFONT");
        int counter = 350;
        while(counter > 0)
        {
            Delay(1);
            counter--;
            HudMessageBold(s:"NEXT ROUND:";  HUDMSG_FADEOUT, 14, CR_RED, 0.5, 0.5,1.0, 1);
            HudMessage(i:counter / 35;  HUDMSG_FADEOUT, 15, CR_WHITE, 0.5, 0.55, 1.0, 1);
        }
        roundwave++;
        waveover = false;
        // Log(s:"waveover:", b:waveover);
    }
    Delay(1);
    Restart;
}

// script "DinerRoundHandler" (void){
//     int spothandler = 1;
//     int spotspawn;
//     if(roundwave > 0 && waveover == false && wavesize < 1){
//         for (spotspawn = 1; spotspawn <= roundnumbers; spotspawn++ )
//         {
//             if(roundwave > 4){
//                 SpawnSpotFacing(mediumenemies[Random(3,7)], spothandler, 116);
//                 SetThingSpecial(116, ACS_NamedExecute, "PointsAddMedium");
//                 wavenumbers++;
//                 spothandler++;
//                 SpawnSpot("TeleportFog", spothandler);
//             }else if(roundwave > 9){
//                 SpawnSpotFacing(strongenemies[Random(8,10)], spothandler, 117);
//                 SetThingSpecial(117, ACS_NamedExecute, "PointsAddStrong");
//                 wavenumbers++;
//                 spothandler++;
//                 SpawnSpot("TeleportFog", spothandler);
//             }else if(roundwave <= 4){
//                 SpawnSpotFacing(weakenemies[Random(0,2)], spothandler, 115);
//                 SetThingSpecial(115, ACS_NamedExecute, "PointsAddWeak");
//                 wavenumbers++;
//                 spothandler++;
//                 SpawnSpot("TeleportFog", spothandler);
//             }
//             if(spothandler>24)
//             {
//                 spothandler = 1;
//             }
//             Delay(7);
//         }
//     }
// }

script "PointsAddWeak" (void){
    int enemyvalue = 75 + (10 * Random(0,2));
    if (doublepointsbool == TRUE){
        enemyvalue = enemyvalue * 2;
    }
    zombiepoints = zombiepoints + enemyvalue;
    HudMessageBold(s:" + $",  i:enemyvalue;  HUDMSG_FADEOUT, 555, CR_WHITE, 0.01, 0.65, 1.0, 1);
    if(Random(1,100) <= 5)
    {
        PowerUpHandler();
        // ACS_NamedExecute("MaxAmmoHandler",0,0,0);
    }
}
script "PointsAddMedium" (void){
    int enemyvalue = 100 + (25 * Random(0,4));
    if (doublepointsbool == TRUE){
        enemyvalue = enemyvalue * 2;
    }
    zombiepoints = zombiepoints + enemyvalue;
    HudMessageBold(s:" + $",  i:enemyvalue;  HUDMSG_FADEOUT, 555, CR_WHITE, 0.01, 0.65, 1.0, 1);
    if(Random(1,100) <= 10)
    {
        PowerUpHandler();
        // ACS_NamedExecute("MaxAmmoHandler",0,0,0);
    }
}
script "PointsAddStrong" (void){
    int enemyvalue = 200 + (50 * Random(0,2));
    if (doublepointsbool == TRUE){
        enemyvalue = enemyvalue * 2;
    }
    zombiepoints = zombiepoints + enemyvalue;
    HudMessageBold(s:" + $",  i:enemyvalue;  HUDMSG_FADEOUT, 555, CR_WHITE, 0.01, 0.65, 1.0, 1);
    if(Random(1,100) <= 15)
    {
        PowerUpHandler();
        // ACS_NamedExecute("MaxAmmoHandler",0,0,0);
    }
}
script "PointsAddBoss" (void){
    int enemyvalue = 300 + (50 * Random(0,2));
    if (doublepointsbool == TRUE){
        enemyvalue = enemyvalue * 2;
    }
    zombiepoints = zombiepoints + enemyvalue;
    HudMessageBold(s:" + $",  i:enemyvalue;  HUDMSG_FADEOUT, 555, CR_WHITE, 0.01, 0.65, 1.0, 1);
    if(Random(1,100) <= 40)
    {
        PowerUpHandler();
        // ACS_NamedExecute("MaxAmmoHandler",0,0,0);
    }
}

// function void PointsAddKill(void)
// {
    
// }

script "PointsRemoveBerserk" (void){
    if(zombiepoints >= 1000){
        zombiepoints = zombiepoints - 1000;
    }else{
        Thing_Damage2(935, playerisalive / 2, "Fire");
        HudMessageBold(s:"You could not meed the cost! Health sacrificed!";  HUDMSG_FADEOUT, 901, CR_RED, 0.5, 0.725, 2.0, 1);
    }
    HudMessageBold(s:"Obtained the secret berserk!";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.7, 2.0, 1);
}

script "PointsAddCheat" (void){
    zombiepoints = zombiepoints + 500000;
    HudMessageBold(s:"Cheater!!!!";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.7, 1.0, 1);
}

function void  MaxAmmoHandler(void)
{
    // GiveInventory("Clip", 200);
    // GiveInventory("Shell", 50);
    // GiveInventory("RocketAmmo", 50);
    // GiveInventory("Cell", 300);
    // GiveInventory("RifleBullets", 50);
    GiveActorInventory(935, "Clip", 400);
    GiveActorInventory(935, "Shell", 100);
    GiveActorInventory(935, "RocketAmmo", 100);
    GiveActorInventory(935, "Cell", 600);
    GiveActorInventory(935, "RifleBullets", 80);
    SetFont("BIGFONT");
    HudMessageBold(s:"MAX AMMO!";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.6, 2.0, 1);
}
function void  NukeKaboom(void)
{
    Thing_Destroy(115,1);
    Thing_Destroy(116,1);
    Thing_Destroy(117,1);
    Thing_Destroy(118,1);
    zombiepoints = zombiepoints + 500;
    SetFont("BIGFONT");
    HudMessageBold(s:"NUKE!";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.6, 2.0, 1);
}
script "DoublePoints"(void)
{
    int powertimer;
    powertimer = 35 * 15;
    SetFont("BIGFONT");
    // HudMessageBold(s:"DOUBLE POINTS!";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.7, 2.0, 1);
    doublepointsbool = TRUE;
    while(powertimer > 0){
        Delay(1);
        powertimer--;
        HudMessageBold(s:"DOUBLE POINTS!";  HUDMSG_FADEOUT, 1602, CR_WHITE, 0.5, 0.7,1.0, 1);
        HudMessage(i:powertimer / 35;  HUDMSG_FADEOUT, 1603, CR_WHITE, 0.5, 0.725, 1.0, 1);
    }
    doublepointsbool = FALSE;
    // powertimer = 15 * 35;
}
function void MaxArmorHandler(void)
{
    // GiveInventory("BlueArmor50", 1);
    GiveActorInventory(935, "BlueArmor50", 1);
    SetFont("BIGFONT");
    HudMessageBold(s:"MAX ARMOR!";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.6, 2.0, 1);
}
function void SoulsphereHandler(void)
{
    // GiveInventory("Soulsphere", 100);
    GiveActorInventory(935, "Soulsphere", 100);
    SetFont("BIGFONT");
    HudMessageBold(s:"SOULSPHERE!";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.6, 2.0, 1);
}
function void BerserkAdder(void)
{
    // GiveInventory("NewBerserk", 100);
    GiveActorInventory(935, "NewBerserk", 100);
    SetFont("BIGFONT");
    HudMessageBold(s:"BERSERK!";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.6, 2.0, 1);
}

function void PowerUpHandler(void)
{
    int powerrandy = Random(1,6);
    if (powerrandy == 1){
        MaxAmmoHandler();
    }else if(powerrandy == 2){
        NukeKaboom();
    }else if(powerrandy == 3){
        ACS_NamedExecute("DoublePoints",0,0,0,0);
    }else if(powerrandy == 4){
        MaxArmorHandler();
    }else if(powerrandy == 5){
        SoulsphereHandler();
    }else if(powerrandy == 6){
        BerserkAdder();
    }
}

script "PukePowerUp" (void)
{
    PowerUpHandler();
}

// script "MaxAmmoHandler" (void)
// {
//     GiveInventory("Clip", 200);
//     GiveInventory("Shell", 50);
//     GiveInventory("RocketAmmo", 50);
//     GiveInventory("Cell", 300);
//     GiveInventory("RifleBullets", 50);
//     SetFont("BIGFONT");
//     HudMessageBold(s:"MAX AMMO!";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.7, 2.0, 1);
// }

str weaponbox[11] = {"M1911A1", "MP40", "Minigun", "M16", "Trenchgun", "NewSuperShotgun", "RocketLauncher", "FastPlasmaRifle", "BFG9000", "RayGun", "KAR98K"};
str weaponboxnames[11] = {"Walther PPK", "MP40", "Minigun", "M16A1", "Trenchgun", "Super Shotgun", "Rocket Launcher", "Plasma Rifle", "BFG9000", "Ray Gun", "Kar98K"};

script "MysteryBox" (void){
    int randy;
    // str anothermiddleman;
    currentweapon = GetWeapon();
    
    // if(StrCmp(currentweapon, "DoomFist") == 0)
    // {
    //     HudMessageBold(s:"Need another weapon to exchange.";  HUDMSG_FADEOUT | HUDMSG_LOG, 900, CR_WHITE, 0.5, 0.7, 1.0, 1);
    //     // currentweapon = lastweapon2;
    //     Delay(35);
    // }else{
    if(zombiepoints >= 950)
    {
        // HudMessageBold(s:"Exchanging ", s:currentweapon;  HUDMSG_FADEOUT | HUDMSG_LOG, 900, CR_WHITE, 0.5, 0.7, 1.0, 1);
        // Delay(35);
        randy = Random(0, 10);
        // newweapon = weaponbox[randy];
        for (int el = 0;el <= 10; el++)
        {
            SpawnSpotFacing(weaponbox[el], 950, 654);
            Delay(5);
            Thing_Remove(654);
        }
        while ((StrCmp(newweapon, lastweapon) == 0) || (StrCmp(newweapon, currentweapon) == 0) || (StrCmp(newweapon, anothermiddleman) == 0))
        {
            randy = Random(0, 10);
            newweapon = weaponbox[randy];
            // Log(i:randy, s:newweapon);
        }
        zombiepoints = zombiepoints - 950;
        SpawnSpotFacing(newweapon, 951, 655);
        SetThingSpecial(655, ACS_NamedExecute, "MysteryBoxGunSwitch");
        lastweapon2 = lastweapon;
        lastweapon = currentweapon;
        currentweapon = newweapon;
        anothermiddleman = newweapon;
        Delay(20);
        if(randy<=3)
        {
            GiveActorInventory(935, "Clip", 400);
        }else if(randy ==4 || randy == 5)
        {
            GiveActorInventory(935, "Shell", 100);
        }else if (randy == 6)
        {
            GiveActorInventory(935, "RocketAmmo", 100);
        }else if(randy > 6 && randy < 10)
        {
            GiveActorInventory(935, "Cell", 300);
        }else if (randy == 10)
        {
            GiveActorInventory(935, "RifleBullets", 50);
        }
        Delay(105);
        Thing_Remove(655);
    }else{
        HudMessageBold(s:"Not Enough Points.";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.7, 1.0, 1);
        Delay(35);
    }
    // }
}

script "MysteryBoxGunSwitch" (void)
{
    str fuckthisgun;
    int randy;
    if(StrCmp(GetWeapon(), "DoomFist") == 0){
        while (randy < 11)
        {
            randy = Random(0, 10);
            fuckthisgun = weaponbox[randy];
            Delay(1);
            if (CheckInventory(fuckthisgun) > 0)
            {
                TakeInventory(fuckthisgun, 1);
                Break;
            }
        }
    }else if(StrCmp(GetWeapon(), newweapon) == 0){
        TakeInventory(GetWeapon(), 1);
        GiveInventory(newweapon, 1);
    }else{
        TakeInventory(GetWeapon(), 1);
    }
    // Log(s:"---Newloop---");
}

script "MysteryBoxTexto" (void)
{
    HudMessageBold(s:"Mystery Box: $950";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.7, 1.0, 1);
    Delay(35*5);
}

script "JuggerNog" (void)
{
    int randy = Random(1, 10);
    if(playerisalive < 100)
    {
        if(zombiepoints > 250)
        {
            zombiepoints = zombiepoints - 250;
            if(randy == 1)
            {
                GiveInventory("NewBerserk", 100);
                HudMessageBold(s:"Berserk!";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.7, 1.0, 1);
                Delay(35);
            }else{
                GiveInventory("FullHeal", 100);
                HudMessageBold(s:"Fully Healed!";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.7, 1.0, 1);
                Delay(35);
            }
        }else{
            HudMessageBold(s:"Not Enough Points.";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.7, 1.0, 1);
            Delay(35);
        }
    }else{
        HudMessageBold(s:"Already at full health.";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.7, 1.0, 1);
        Delay(35);
    }
}
script "JuggerNogTexto" (void)
{
    HudMessageBold(s:"Health: $250";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.7, 1.0, 1);
    if(playerisalive >= 100)
    {
        HudMessageBold(s:"Already at full health.";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.7, 1.0, 1);
        Delay(35);
    }
}

script "QuickRevive" (void)
{
    playerisarmored =  CheckInventory("Armor");
    int randy = Random(1, 10);
    if(playerisalive < 200)
    {
        if(zombiepoints > 750)
        {
            zombiepoints = zombiepoints - 750;
            if(randy == 1)
            {
                GiveInventory("Megasphere", 1);
                HudMessageBold(s:"Megasphere!";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.7, 1.0, 1);
                Delay(35);
            }else{
                GiveInventory("Soulsphere", 100);
                HudMessageBold(s:"Soulsphere!";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.7, 1.0, 1);
                Delay(35);
            }
        }else{
            HudMessageBold(s:"Not Enough Points.";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.7, 1.0, 1);
            Delay(35);
        }
    }else{
        HudMessageBold(s:"Already at full health.";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.7, 1.0, 1);
        Delay(35);
    }
}
script "QuickReviveTexto" (void)
{
    HudMessageBold(s:"Power Up: $750";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.7, 1.0, 1);
    if(playerisalive >= 200)
    {
        HudMessageBold(s:"Already at full health.";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.7, 1.0, 1);
        Delay(35);
    }
}

script "VictoriousTortoise" (void)
{
    playerisarmored =  CheckInventory("Armor");
    int randy = Random(1, 100);
    if(playerisarmored < 100)
    {
        if(zombiepoints > 250)
        {
            zombiepoints = zombiepoints - 250;
            if(randy <= 5)
            {
                GiveInventory("EnchantedArmor", 1);
                HudMessageBold(s:"Enchanted Armor!";  HUDMSG_FADEOUT, 900, CR_GOLD, 0.5, 0.7, 1.0, 1);
                Delay(35);
            }else if((randy >= 6) && (randy <= 20))
            {
                GiveInventory("RedArmor", 1);
                HudMessageBold(s:"Advanced Armor!";  HUDMSG_FADEOUT, 900, CR_RED, 0.5, 0.7, 1.0, 1);
                Delay(35);
            }else if((randy >= 21) && (randy <= 50))
            {
                GiveInventory("BlueArmor50", 1);
                HudMessageBold(s:"Combat Armor!";  HUDMSG_FADEOUT, 900, CR_BLUE, 0.5, 0.7, 1.0, 1);
                Delay(35);
            }else if((randy >= 51) && (randy <= 100))
            {
                GiveInventory("GreenArmor35", 1);
                HudMessageBold(s:"Security Armor!";  HUDMSG_FADEOUT, 900, CR_GREEN, 0.5, 0.7, 1.0, 1);
                Delay(35);
            }
        }else{
            HudMessageBold(s:"Not Enough Points.";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.7, 1.0, 1);
            Delay(35);
        }
    }else if(playerisarmored >= 100 && playerisarmored <= 199){
        if(zombiepoints > 750)
        {
            zombiepoints = zombiepoints - 750;
            if(randy <= 5)
            {
                GiveInventory("EnchantedArmor", 1);
                HudMessageBold(s:"Enchanted Armor!";  HUDMSG_FADEOUT, 900, CR_GOLD, 0.5, 0.7, 1.0, 1);
                Delay(35);
            }else if((randy >= 6) && (randy <= 50))
            {
                GiveInventory("RedArmor", 1);
                HudMessageBold(s:"Advanced Armor!";  HUDMSG_FADEOUT, 900, CR_RED, 0.5, 0.7, 1.0, 1);
                Delay(35);
            }else if((randy >= 51) && (randy <= 100))
            {
                GiveInventory("BlueArmor50", 1);
                HudMessageBold(s:"Combat Armor!";  HUDMSG_FADEOUT, 900, CR_BLUE, 0.5, 0.7, 1.0, 1);
                Delay(35);
            }
        }else{
            HudMessageBold(s:"Not Enough Points.";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.7, 1.0, 1);
            Delay(35);
        }
    }else if(playerisarmored == 200){
        HudMessageBold(s:"Already at full armor.";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.7, 1.0, 1);
        Delay(35);
    }
}

str armortypesarray[4] = {
    "GreenArmor35",
    "BlueArmor50",
    "RedArmor",
    "EnchantedArmor",
};
str armornamesarray[4] = {
    "Security Armor",
    "Combat Armor",
    "Advanced Armor",
    "Enchanted Armor",
};
str armorcolorsarray[4] = {
    "\cd",
    "\ch",
    "\cg",
    "\cf",
};
script "VictoriousTortoiseTexto" (void)
{
    HudMessageBold(s:"Armor: $250";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.7, 1.0, 1);
    playerisarmored =  CheckInventory("Armor");
    str currentarmor;
    str currentarmorcolor;
    for (int i; i<5; i++)
    {
        if (GetArmorType(armortypesarray[i], PlayerNumber()))
        {
            currentarmor=armornamesarray[i];
            currentarmorcolor=armorcolorsarray[i];
            break;
        }
    }
    if(playerisarmored >= 1)
    {
        HudMessageBold(s:"Current Armor: ", s:currentarmorcolor, s:currentarmor;  HUDMSG_FADEOUT, 901, CR_WHITE, 0.5, 0.725, 1.0, 1);
        HudMessageBold(s:"At Value: ", i:playerisarmored;  HUDMSG_FADEOUT, 902, CR_WHITE, 0.5, 0.750, 1.0, 1);
    }
    if (playerisarmored >= 100 && playerisarmored < 200)
    {
        HudMessageBold(s:"Upgrade Armor: $750";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.7, 1.0, 1);
    }
    if (playerisarmored == 200)
    {
        HudMessageBold(s:"Already at full armor.";  HUDMSG_FADEOUT, 900, CR_WHITE, 0.5, 0.7, 1.0, 1);
    }
}

script 999 ENTER
//ENDGAME HANDLER
{
    playerisalive = 100;
    while(playerisalive > 0)
    {
       playerisalive =  GetActorProperty(0, APROP_Health);
        Delay(35);
    }
    if(playerisalive == 0){
        SetPlayerProperty(0,1, PROP_TOTALLYFROZEN);
    }
    if(roundwave >= 10)
    {
        SetFont("BIGFONT");
        SecretLevel36++;
        HudMessage(s:"You survived ", i:roundwave, s:" rounds.";  HUDMSG_FADEOUT, 1, CR_WHITE, 0.5, 0.6, 3.0, 1);
        HudMessage(s:"THIS SECRET LEVEL HAS BEEN REVEALED!";  HUDMSG_FADEOUT, 2, CR_RED, 0.5, 0.5, 3.0, 1);
        Delay(35*3);
        SetPlayerProperty(0,0, PROP_TOTALLYFROZEN);
         Exit_Normal(0);
    }else{
        SetFont("BIGFONT");
        HudMessage(s:"You survived ", i:roundwave, s:" rounds.";  HUDMSG_FADEOUT, 1, CR_WHITE, 0.5, 0.7, 3.0, 1);
        Delay(35*3);
        SetPlayerProperty(0,0, PROP_TOTALLYFROZEN);
        Exit_Normal(0);
    }
}